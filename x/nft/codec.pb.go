// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/nft/codec.proto

/*
	Package nft is a generated protocol buffer package.

	It is generated from these files:
		x/nft/codec.proto

	It has these top-level messages:
		NonFungibleToken
		Approval
		ApprovalOptions
		HumanAddressPayload
		BlockChainPayload
		TokenPayload
*/
package nft

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ActionlKind int32

const (
	ActionlKind_transferApproval ActionlKind = 0
	ActionlKind_usageApproval    ActionlKind = 1
)

var ActionlKind_name = map[int32]string{
	0: "transferApproval",
	1: "usageApproval",
}
var ActionlKind_value = map[string]int32{
	"transferApproval": 0,
	"usageApproval":    1,
}

func (x ActionlKind) String() string {
	return proto.EnumName(ActionlKind_name, int32(x))
}
func (ActionlKind) EnumDescriptor() ([]byte, []int) { return fileDescriptorCodec, []int{0} }

type NonFungibleToken struct {
	Id       []byte      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner    []byte      `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Approval []*Approval `protobuf:"bytes,3,rep,name=approval" json:"approval,omitempty"`
	// space here to allow some more....
	//
	// Types that are valid to be assigned to Payload:
	//	*NonFungibleToken_HumanAddress
	//	*NonFungibleToken_Blockchain
	//	*NonFungibleToken_Token
	Payload isNonFungibleToken_Payload `protobuf_oneof:"payload"`
}

func (m *NonFungibleToken) Reset()                    { *m = NonFungibleToken{} }
func (m *NonFungibleToken) String() string            { return proto.CompactTextString(m) }
func (*NonFungibleToken) ProtoMessage()               {}
func (*NonFungibleToken) Descriptor() ([]byte, []int) { return fileDescriptorCodec, []int{0} }

type isNonFungibleToken_Payload interface {
	isNonFungibleToken_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type NonFungibleToken_HumanAddress struct {
	HumanAddress *HumanAddressPayload `protobuf:"bytes,10,opt,name=humanAddress,oneof"`
}
type NonFungibleToken_Blockchain struct {
	Blockchain *BlockChainPayload `protobuf:"bytes,11,opt,name=blockchain,oneof"`
}
type NonFungibleToken_Token struct {
	Token *TokenPayload `protobuf:"bytes,12,opt,name=token,oneof"`
}

func (*NonFungibleToken_HumanAddress) isNonFungibleToken_Payload() {}
func (*NonFungibleToken_Blockchain) isNonFungibleToken_Payload()   {}
func (*NonFungibleToken_Token) isNonFungibleToken_Payload()        {}

func (m *NonFungibleToken) GetPayload() isNonFungibleToken_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *NonFungibleToken) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *NonFungibleToken) GetOwner() []byte {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *NonFungibleToken) GetApproval() []*Approval {
	if m != nil {
		return m.Approval
	}
	return nil
}

func (m *NonFungibleToken) GetHumanAddress() *HumanAddressPayload {
	if x, ok := m.GetPayload().(*NonFungibleToken_HumanAddress); ok {
		return x.HumanAddress
	}
	return nil
}

func (m *NonFungibleToken) GetBlockchain() *BlockChainPayload {
	if x, ok := m.GetPayload().(*NonFungibleToken_Blockchain); ok {
		return x.Blockchain
	}
	return nil
}

func (m *NonFungibleToken) GetToken() *TokenPayload {
	if x, ok := m.GetPayload().(*NonFungibleToken_Token); ok {
		return x.Token
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*NonFungibleToken) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _NonFungibleToken_OneofMarshaler, _NonFungibleToken_OneofUnmarshaler, _NonFungibleToken_OneofSizer, []interface{}{
		(*NonFungibleToken_HumanAddress)(nil),
		(*NonFungibleToken_Blockchain)(nil),
		(*NonFungibleToken_Token)(nil),
	}
}

func _NonFungibleToken_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*NonFungibleToken)
	// payload
	switch x := m.Payload.(type) {
	case *NonFungibleToken_HumanAddress:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HumanAddress); err != nil {
			return err
		}
	case *NonFungibleToken_Blockchain:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Blockchain); err != nil {
			return err
		}
	case *NonFungibleToken_Token:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Token); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("NonFungibleToken.Payload has unexpected type %T", x)
	}
	return nil
}

func _NonFungibleToken_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*NonFungibleToken)
	switch tag {
	case 10: // payload.humanAddress
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HumanAddressPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &NonFungibleToken_HumanAddress{msg}
		return true, err
	case 11: // payload.blockchain
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BlockChainPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &NonFungibleToken_Blockchain{msg}
		return true, err
	case 12: // payload.token
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TokenPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &NonFungibleToken_Token{msg}
		return true, err
	default:
		return false, nil
	}
}

func _NonFungibleToken_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*NonFungibleToken)
	// payload
	switch x := m.Payload.(type) {
	case *NonFungibleToken_HumanAddress:
		s := proto.Size(x.HumanAddress)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NonFungibleToken_Blockchain:
		s := proto.Size(x.Blockchain)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NonFungibleToken_Token:
		s := proto.Size(x.Token)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Approval struct {
	ToAccount []byte           `protobuf:"bytes,1,opt,name=toAccount,proto3" json:"toAccount,omitempty"`
	Action    ActionlKind      `protobuf:"varint,2,opt,name=action,proto3,enum=nft.ActionlKind" json:"action,omitempty"`
	Options   *ApprovalOptions `protobuf:"bytes,3,opt,name=options" json:"options,omitempty"`
}

func (m *Approval) Reset()                    { *m = Approval{} }
func (m *Approval) String() string            { return proto.CompactTextString(m) }
func (*Approval) ProtoMessage()               {}
func (*Approval) Descriptor() ([]byte, []int) { return fileDescriptorCodec, []int{1} }

func (m *Approval) GetToAccount() []byte {
	if m != nil {
		return m.ToAccount
	}
	return nil
}

func (m *Approval) GetAction() ActionlKind {
	if m != nil {
		return m.Action
	}
	return ActionlKind_transferApproval
}

func (m *Approval) GetOptions() *ApprovalOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

type ApprovalOptions struct {
	Timeout   int64 `protobuf:"varint,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Count     int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Immutilbe bool  `protobuf:"varint,3,opt,name=immutilbe,proto3" json:"immutilbe,omitempty"`
}

func (m *ApprovalOptions) Reset()                    { *m = ApprovalOptions{} }
func (m *ApprovalOptions) String() string            { return proto.CompactTextString(m) }
func (*ApprovalOptions) ProtoMessage()               {}
func (*ApprovalOptions) Descriptor() ([]byte, []int) { return fileDescriptorCodec, []int{2} }

func (m *ApprovalOptions) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *ApprovalOptions) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ApprovalOptions) GetImmutilbe() bool {
	if m != nil {
		return m.Immutilbe
	}
	return false
}

type HumanAddressPayload struct {
	Account []byte `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *HumanAddressPayload) Reset()                    { *m = HumanAddressPayload{} }
func (m *HumanAddressPayload) String() string            { return proto.CompactTextString(m) }
func (*HumanAddressPayload) ProtoMessage()               {}
func (*HumanAddressPayload) Descriptor() ([]byte, []int) { return fileDescriptorCodec, []int{3} }

func (m *HumanAddressPayload) GetAccount() []byte {
	if m != nil {
		return m.Account
	}
	return nil
}

type BlockChainPayload struct {
	Account []byte `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *BlockChainPayload) Reset()                    { *m = BlockChainPayload{} }
func (m *BlockChainPayload) String() string            { return proto.CompactTextString(m) }
func (*BlockChainPayload) ProtoMessage()               {}
func (*BlockChainPayload) Descriptor() ([]byte, []int) { return fileDescriptorCodec, []int{4} }

func (m *BlockChainPayload) GetAccount() []byte {
	if m != nil {
		return m.Account
	}
	return nil
}

type TokenPayload struct {
	Account []byte `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *TokenPayload) Reset()                    { *m = TokenPayload{} }
func (m *TokenPayload) String() string            { return proto.CompactTextString(m) }
func (*TokenPayload) ProtoMessage()               {}
func (*TokenPayload) Descriptor() ([]byte, []int) { return fileDescriptorCodec, []int{5} }

func (m *TokenPayload) GetAccount() []byte {
	if m != nil {
		return m.Account
	}
	return nil
}

func init() {
	proto.RegisterType((*NonFungibleToken)(nil), "nft.nonFungibleToken")
	proto.RegisterType((*Approval)(nil), "nft.approval")
	proto.RegisterType((*ApprovalOptions)(nil), "nft.approvalOptions")
	proto.RegisterType((*HumanAddressPayload)(nil), "nft.humanAddressPayload")
	proto.RegisterType((*BlockChainPayload)(nil), "nft.blockChainPayload")
	proto.RegisterType((*TokenPayload)(nil), "nft.tokenPayload")
	proto.RegisterEnum("nft.ActionlKind", ActionlKind_name, ActionlKind_value)
}
func (m *NonFungibleToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NonFungibleToken) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Owner) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Owner)))
		i += copy(dAtA[i:], m.Owner)
	}
	if len(m.Approval) > 0 {
		for _, msg := range m.Approval {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCodec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Payload != nil {
		nn1, err := m.Payload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *NonFungibleToken_HumanAddress) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HumanAddress != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.HumanAddress.Size()))
		n2, err := m.HumanAddress.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *NonFungibleToken_Blockchain) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Blockchain != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Blockchain.Size()))
		n3, err := m.Blockchain.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *NonFungibleToken_Token) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Token != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Token.Size()))
		n4, err := m.Token.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Approval) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Approval) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ToAccount) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.ToAccount)))
		i += copy(dAtA[i:], m.ToAccount)
	}
	if m.Action != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Action))
	}
	if m.Options != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Options.Size()))
		n5, err := m.Options.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *ApprovalOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApprovalOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timeout != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Timeout))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Count))
	}
	if m.Immutilbe {
		dAtA[i] = 0x18
		i++
		if m.Immutilbe {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *HumanAddressPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HumanAddressPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Account)))
		i += copy(dAtA[i:], m.Account)
	}
	return i, nil
}

func (m *BlockChainPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockChainPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Account)))
		i += copy(dAtA[i:], m.Account)
	}
	return i, nil
}

func (m *TokenPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Account)))
		i += copy(dAtA[i:], m.Account)
	}
	return i, nil
}

func encodeVarintCodec(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NonFungibleToken) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	if len(m.Approval) > 0 {
		for _, e := range m.Approval {
			l = e.Size()
			n += 1 + l + sovCodec(uint64(l))
		}
	}
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *NonFungibleToken_HumanAddress) Size() (n int) {
	var l int
	_ = l
	if m.HumanAddress != nil {
		l = m.HumanAddress.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *NonFungibleToken_Blockchain) Size() (n int) {
	var l int
	_ = l
	if m.Blockchain != nil {
		l = m.Blockchain.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *NonFungibleToken_Token) Size() (n int) {
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Approval) Size() (n int) {
	var l int
	_ = l
	l = len(m.ToAccount)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovCodec(uint64(m.Action))
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}

func (m *ApprovalOptions) Size() (n int) {
	var l int
	_ = l
	if m.Timeout != 0 {
		n += 1 + sovCodec(uint64(m.Timeout))
	}
	if m.Count != 0 {
		n += 1 + sovCodec(uint64(m.Count))
	}
	if m.Immutilbe {
		n += 2
	}
	return n
}

func (m *HumanAddressPayload) Size() (n int) {
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}

func (m *BlockChainPayload) Size() (n int) {
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}

func (m *TokenPayload) Size() (n int) {
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}

func sovCodec(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCodec(x uint64) (n int) {
	return sovCodec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NonFungibleToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: nonFungibleToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: nonFungibleToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Approval = append(m.Approval, &Approval{})
			if err := m.Approval[len(m.Approval)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HumanAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HumanAddressPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &NonFungibleToken_HumanAddress{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockchain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BlockChainPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &NonFungibleToken_Blockchain{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TokenPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &NonFungibleToken_Token{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Approval) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: approval: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: approval: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAccount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAccount = append(m.ToAccount[:0], dAtA[iNdEx:postIndex]...)
			if m.ToAccount == nil {
				m.ToAccount = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (ActionlKind(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &ApprovalOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApprovalOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: approvalOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: approvalOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Immutilbe", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Immutilbe = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HumanAddressPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: humanAddressPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: humanAddressPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockChainPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: blockChainPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: blockChainPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: tokenPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: tokenPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCodec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCodec
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCodec
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCodec(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCodec = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCodec   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("x/nft/codec.proto", fileDescriptorCodec) }

var fileDescriptorCodec = []byte{
	// 417 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcd, 0x8a, 0xd4, 0x40,
	0x14, 0x85, 0xbb, 0x12, 0x66, 0x7a, 0xe6, 0x26, 0x33, 0x26, 0x65, 0x23, 0xb5, 0x90, 0xd0, 0x64,
	0x95, 0x11, 0x4c, 0x43, 0x0b, 0xe2, 0x4a, 0xe8, 0x11, 0x44, 0x70, 0xa1, 0x04, 0xf7, 0x52, 0x49,
	0x2a, 0x33, 0x45, 0x27, 0x55, 0x21, 0xa9, 0xf8, 0xb3, 0xf5, 0x09, 0x04, 0x5f, 0xca, 0xa5, 0x8f,
	0x20, 0xed, 0x8b, 0x48, 0xaa, 0x3a, 0x9d, 0xb4, 0x3f, 0xb3, 0xeb, 0xfb, 0x9d, 0x73, 0xa8, 0x7b,
	0x4f, 0x07, 0xfc, 0x4f, 0x2b, 0x51, 0xa8, 0x55, 0x26, 0x73, 0x96, 0xc5, 0x75, 0x23, 0x95, 0xc4,
	0xb6, 0x28, 0x54, 0xf8, 0xcd, 0x02, 0x4f, 0x48, 0xf1, 0xb2, 0x13, 0x37, 0x3c, 0x2d, 0xd9, 0x3b,
	0xb9, 0x65, 0x02, 0x5f, 0x82, 0xc5, 0x73, 0x82, 0x96, 0x28, 0x72, 0x13, 0x8b, 0xe7, 0x78, 0x01,
	0x27, 0xf2, 0xa3, 0x60, 0x0d, 0xb1, 0x34, 0x32, 0x03, 0xbe, 0x82, 0x33, 0x5a, 0xd7, 0x8d, 0xfc,
	0x40, 0x4b, 0x62, 0x2f, 0xed, 0xc8, 0x59, 0x5f, 0xc4, 0xa2, 0x50, 0xf1, 0x00, 0x93, 0x83, 0x8c,
	0x9f, 0x83, 0x7b, 0xdb, 0x55, 0x54, 0x6c, 0xf2, 0xbc, 0x61, 0x6d, 0x4b, 0x60, 0x89, 0x22, 0x67,
	0x4d, 0xb4, 0x7d, 0x2a, 0xbc, 0xa5, 0x9f, 0x4b, 0x49, 0xf3, 0x57, 0xb3, 0xe4, 0xc8, 0x8f, 0x9f,
	0x01, 0xa4, 0xa5, 0xcc, 0xb6, 0xd9, 0x2d, 0xe5, 0x82, 0x38, 0x3a, 0xfd, 0x40, 0xa7, 0x35, 0x7e,
	0xd1, 0xe3, 0x31, 0x3b, 0xf1, 0xe2, 0x2b, 0x38, 0x51, 0xfd, 0x4d, 0xc4, 0xd5, 0x21, 0x5f, 0x87,
	0x34, 0x19, 0xfd, 0xc6, 0x71, 0x7d, 0x0e, 0xf3, 0xda, 0xb0, 0xf0, 0x0b, 0x1a, 0x6f, 0xc3, 0x0f,
	0xe1, 0x5c, 0xc9, 0x4d, 0x96, 0xc9, 0x4e, 0xa8, 0x7d, 0x29, 0x23, 0xc0, 0x11, 0x9c, 0xd2, 0x4c,
	0x71, 0x29, 0x74, 0x39, 0x97, 0x6b, 0xcf, 0x74, 0xa0, 0x51, 0xf9, 0x9a, 0x8b, 0x3c, 0xd9, 0xeb,
	0x38, 0x86, 0xb9, 0xac, 0xfb, 0x5f, 0x2d, 0xb1, 0xf5, 0x32, 0x8b, 0xa3, 0xba, 0xde, 0x18, 0x2d,
	0x19, 0x4c, 0xe1, 0x7b, 0xb8, 0xf7, 0x87, 0x86, 0x09, 0xcc, 0x15, 0xaf, 0x98, 0xec, 0xcc, 0x22,
	0x76, 0x32, 0x8c, 0xfd, 0x5f, 0x64, 0x16, 0xb4, 0x34, 0x37, 0x43, 0xbf, 0x3a, 0xaf, 0xaa, 0x4e,
	0xf1, 0x32, 0x65, 0xfa, 0xd1, 0xb3, 0x64, 0x04, 0xe1, 0x0a, 0xee, 0xff, 0xa3, 0xfc, 0xfe, 0x11,
	0x7a, 0x74, 0xed, 0x30, 0x86, 0x8f, 0xc1, 0xff, 0xab, 0xef, 0x3b, 0xec, 0x11, 0xb8, 0xd3, 0xa6,
	0xff, 0xef, 0x7c, 0xf4, 0x14, 0x9c, 0x49, 0x63, 0x78, 0x01, 0x9e, 0x6a, 0xa8, 0x68, 0x0b, 0xd6,
	0x6c, 0xf6, 0x0d, 0x78, 0x33, 0xec, 0xc3, 0x45, 0xd7, 0xd2, 0x1b, 0x76, 0x40, 0xe8, 0xda, 0xfb,
	0xbe, 0x0b, 0xd0, 0x8f, 0x5d, 0x80, 0x7e, 0xee, 0x02, 0xf4, 0xf5, 0x57, 0x30, 0x4b, 0x4f, 0xf5,
	0xb7, 0xfd, 0xe4, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0x83, 0x42, 0x34, 0xf0, 0x02, 0x00,
	0x00,
}
